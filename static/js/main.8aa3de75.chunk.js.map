{"version":3,"sources":["components/Connect.js","components/ActiveChats.js","components/ChatWindow.js","components/NavBar.js","conexion/database.js","components/ListUsers.js","components/SelectUser.js","components/CreateChat.js","components/ModalCreate.js","components/User.js","App.js","serviceWorker.js","conexion/firebase.config.js","index.js"],"names":["Title","styled","h1","FormUser","div","ImgUser","img","Connect","connect","useState","username","setUserName","className","src","type","placeholder","value","onChange","e","target","onClick","disabled","ActiveChats","myActivateChats","setCurrentChat","myPrivateChats","tableActivate","columns","title","field","headerStyle","color","data","map","activate","tablePrivate","chat","onRowClick","evt","selectedRow","group","localization","toolbar","searchPlaceholder","options","searchFieldAlignment","paging","private","Messages","ChatWindow","messages","sendMessage","currentChat","currentUser","users","messageBody","setMessageBody","sortedMessages","sort","a","b","Date","created","valueOf","style","height","message","index","key","sender","body","useStyles","makeStyles","theme","root","flexGrow","nav","backgroundColor","menuButton","marginRight","spacing","NavBar","user","classes","setUserId","AppBar","position","Toolbar","Typography","variant","Button","getDataBase","dbString","callback","database","ref","on","snapshot","val","saveDataBase","set","ListUsers","createChat","userCurrent","tableUser","formControl","margin","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","getStyles","name","personName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","SelectUser","setRecipient","useTheme","React","setPersonName","FormControl","InputLabel","id","Select","labelId","multiple","event","input","Input","renderValue","selected","Chip","label","MenuItem","CreateChat","chatName","setChatName","recipient","DialogTitle","withStyles","padding","closeButton","right","top","palette","grey","props","children","onClose","other","disableTypography","IconButton","aria-label","DialogContent","MuiDialogContent","ModalCreate","userId","open","setOpen","handleClose","Dialog","fullWidth","aria-labelledby","dividers","filter","orange","getContrastText","deepOrange","User","logo","slice","toUpperCase","Avatar","DivApp","App","setUsers","useEffect","getUsers","res","Object","keys","includes","useAuth","setMyActivateChats","setMyPrivateChats","currentChatMessages","setCurrentChatMessages","currentChatUsers","setCurrentChatUsers","values","messageId","uuid","toISOString","url","forEach","rec","useChats","Boolean","window","location","hostname","match","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8aa3de75.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.h1`\r\n  color: #110F29;\r\n  text-align: center;\r\n`; \r\n\r\nconst FormUser = styled.div`\r\n  width: 60%;\r\n`;\r\n\r\nconst ImgUser = styled.img`\r\n  max-height: 100%;`\r\nconst Connect = ({connect}) => {\r\n\r\n  const [ username, setUserName] = useState('');\r\n  return (\r\n    <section className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 col-12 px-0\">\r\n          <ImgUser className = \"img-fluid\" src=\"https://previews.123rf.com/images/prettyvectors/prettyvectors1902/prettyvectors190200004/117030328-two-people-man-and-woman-character-talking-to-a-smart-phone-online-communication-email-message-conce.jpg\"/>\r\n        </div>\r\n        <div className=\"col-md-6 col-12 my-5 d-flex flex-column justify-content-around align-items-center\">\r\n          <Title>ID Business Intelligence</Title>\r\n          <FormUser className=\"d-flex flex-column\">\r\n            <label className=\"font-weight-bold\"> Nombre:  </label>\r\n            <input type=\"text\" className=\"form-control mb-3\" placeholder=\"Ingresa tu nombre\" value={username}\r\n            onChange={e=> setUserName(e.target.value)}/>\r\n            <button className=\"btn btn-dark\" onClick={()=> connect(username)} disabled={!username}>Ingresar</button>\r\n          </FormUser>\r\n          <p>@Copyright 2020</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Connect;","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nconst ActiveChats = ({ myActivateChats, setCurrentChat, myPrivateChats}) => {\r\n\r\n  const arrActivateChats = myActivateChats.map(activate => {\r\n    return {'group': activate}})\r\n\r\n  const arrPrivateChats = myPrivateChats.map(chat => {\r\n    return {'private': chat}\r\n  })\r\n\r\n  const tableActivate = {\r\n    columns: [\r\n      { title: 'GRUPOS', field: 'group' ,  headerStyle: {\r\n        color: '#7774E1'},\r\n      }],\r\n    data: arrActivateChats,\r\n  }\r\n\r\n  const tablePrivate = {\r\n    columns: [\r\n      { title: 'INDIVIDUAL', field: 'private' ,  headerStyle: {\r\n        color: '#7774E1'},\r\n      }],\r\n    data: arrPrivateChats,\r\n  }\r\n\r\n  return(\r\n    <section>\r\n    <MaterialTable\r\n      title=\"\"\r\n      columns= {tableActivate.columns}\r\n      data={tableActivate.data}\r\n      onRowClick={((evt, selectedRow) => setCurrentChat(selectedRow.group))}\r\n      localization={{\r\n        toolbar:{\r\n          searchPlaceholder:'Buscar Grupo' \r\n        }\r\n      }}\r\n      options={{\r\n        searchFieldAlignment: 'left',\r\n        paging: false\r\n      }}\r\n    />\r\n    <hr/>\r\n    <MaterialTable\r\n    title=\"\"\r\n    columns= {tablePrivate.columns}\r\n    data={tablePrivate.data}\r\n    onRowClick={((evt, selectedRow) => setCurrentChat(selectedRow.private))}\r\n    localization={{\r\n      toolbar:{\r\n        searchPlaceholder:'Buscar Individual' \r\n      }\r\n    }}\r\n    options={{\r\n      searchFieldAlignment: 'left',\r\n      paging: false\r\n    }}\r\n  />\r\n</section>\r\n)};\r\n\r\nexport default ActiveChats;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Messages = styled.div`\r\nbackground-color: #E1E0FF;\r\nwidth: 60%;\r\n`; \r\n\r\nconst ChatWindow = ({messages = [], sendMessage, currentChat, users = [], currentUser}) => {\r\n  const [messageBody, setMessageBody] = useState('');\r\n\r\n  const sortedMessages = messages.sort((a,b) => new Date(a.created).valueOf() - new Date(b.created).valueOf());\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column justify-content-between\" style={{height: '100%',}}>\r\n      <h2>{currentChat}</h2>\r\n      <div className=\"messages\">\r\n        {sortedMessages.map((message, index) => (\r\n          <div key={index} className={message.sender === currentUser ? \"d-flex justify-content-end\" : \"d-flex justify-content-start\" }>\r\n            <Messages className={message.sender === currentUser ? \"mb-2 p-2 bg-info text-white rounded-pill\" :  \"mb-2 p-2 rounded-pill\"}  key={index}>{message.sender} : {message.body}</Messages>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"send-message d-flex\">\r\n        <input value={messageBody} className=\"text-entry form-control rounded-pill\"\r\n        placeholder=\"Escribe un mensaje\"\r\n        onChange={e => setMessageBody(e.target.value)}></input>\r\n        <button className=\"btn btn-inherit font-weight-bold\" onClick={()=> sendMessage(currentChat, messageBody)}>Enviar</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatWindow;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  nav:{\r\n    backgroundColor: 'black',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function NavBar({user, setUserId}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.nav}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            ID Business Intelligence\r\n          </Typography>\r\n          <Button color=\"inherit\">{user}</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import {database} from 'firebase';\r\n\r\nexport const getDataBase = (dbString, callback) => {\r\n  const ref = database().ref(dbString);\r\n  ref.on('value', snapshot => {\r\n    if(snapshot.val()) {\r\n      callback(snapshot.val());\r\n    }\r\n  });\r\n}\r\n\r\nexport const saveDataBase = (dbString, val) => {\r\n  database().ref(dbString).set(val);\r\n}","/* import React from 'react';\r\n\r\nconst ListUsers = ({users, createChat, userCurrent}) => {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <ul className=\"list-group\">\r\n        {users.map(user => (\r\n          <li key={user} onClick={()=> createChat([user],`${userCurrent}-${user}` , 'chatPrivate')} className=\"list-group-item\">{user}</li>\r\n        ))}\r\n      </ul>\r\n      <ul>\r\n        <li></li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListUsers; */\r\n\r\nimport React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function ListUsers({users, createChat, userCurrent}) {\r\n\r\n  const arrUsers = users.map(user => {\r\n    return {'user': user}})\r\n\r\n  const tableUser = {\r\n    columns: [\r\n      { title: 'USUARIOS', field: 'user',headerStyle: { color: '#FF5722',}},\r\n      ],\r\n    data: arrUsers,\r\n  }\r\n\r\n\r\n  return (\r\n    <section>\r\n      <MaterialTable\r\n        title=\"\"\r\n        columns={tableUser.columns}\r\n        data={tableUser.data}\r\n        onRowClick={((evt, selectedRow) => createChat([selectedRow.user],`${userCurrent}-->${selectedRow.user}` , 'chatPrivate'))}\r\n        localization={{\r\n          toolbar:{\r\n            searchPlaceholder:'Buscar Usuario' \r\n          }\r\n        }}\r\n        options={{\r\n          searchFieldAlignment: 'left',\r\n          paging: false\r\n        }}\r\n      />\r\n    </section>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 600,\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function SelectUser({users, setRecipient}) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [personName, setPersonName] = React.useState([]);\r\n\r\n  const handleChange = (event) => {\r\n    setPersonName(event.target.value);\r\n    setRecipient(event.target.value)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-mutiple-chip-label\">Miembros:</InputLabel>\r\n        <Select\r\n          labelId=\"demo-mutiple-chip-label\"\r\n          id=\"demo-mutiple-chip\"\r\n          multiple\r\n          value={personName}\r\n          onChange={handleChange}\r\n          input={<Input id=\"select-multiple-chip\" />}\r\n          renderValue={(selected) => (\r\n            <div className={classes.chips}>\r\n              {selected.map((value) => (\r\n                <Chip key={value} label={value} className={classes.chip} />\r\n              ))}\r\n            </div>\r\n          )}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {users.map((name) => (\r\n            <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\r\n              {name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport SelectUser from './SelectUser';\r\n\r\nconst CreateChat = ({createChat, users}) => {\r\n  \r\n  const [chatName, setChatName] = useState('');\r\n  const [recipient, setRecipient] = useState(users[0]);\r\n\r\n  return (\r\n    <div className=\"panel\">\r\n      <label>Nombre: </label>\r\n      <input type=\"text\" className=\"form-control mb-3\" placeholder=\"Ingresa un nombre para el grupo\"\r\n      onChange={e=> setChatName(e.target.value)} value={chatName}/>\r\n      <label>Elija miembros (Ctrl + click) :</label>\r\n      <SelectUser users={users} setRecipient={setRecipient}/>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button className=\"btn btn-dark\" onClick={()=> createChat(recipient, chatName, 'chats')} disabled={!chatName || !recipient }>Crear</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateChat;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CreateChat from './CreateChat';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\n\r\nexport default function ModalCreate({createChat, users, userId}) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"inherit\" onClick={handleClickOpen}>\r\n        Crear grupo\r\n      </Button>\r\n      <Dialog onClose={handleClose} maxWidth={'sm'} fullWidth={true} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          CREAR GRUPO\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <CreateChat createChat= {createChat} users={users.filter(user => user !== userId)} />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n}}));\r\n\r\nexport default function User({user}) {\r\n\r\n  const logo = user.slice(0,2).toUpperCase();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\" >\r\n      <Avatar className={classes.orange}>{logo}</Avatar>\r\n      <h2 className=\"ml-2\">{user}</h2>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Connect from './components/Connect';\nimport ActiveChats from './components/ActiveChats';\nimport ChatWindow from './components/ChatWindow';\nimport NavBar from './components/NavBar';\nimport { getDataBase, saveDataBase } from './conexion/database';\nimport { v4 as uuid } from 'uuid';\nimport ListUsers from './components/ListUsers';\nimport ModalCreate from './components/ModalCreate';\nimport User from './components/User';\nimport styled from 'styled-components';\n\nconst DivApp = styled.div`\nbackground: white;\nheight: 100vh;\n`; \n\n\nfunction App() {\n\n  // Create use Hooks USEAUTH\n  const useAuth = () => {\n    const [userId, setUserId] = useState(null);\n    const [users, setUsers] = useState(null);\n    \n    useEffect(()=> {\n      getUsers();\n    }, []);\n    \n    const connect = (username) => {\n      if ( !users || !users.includes(username) ){\n        saveDataBase(`/users/${username}`, true);\n      }\n      \n      setUserId(username);\n    }\n    \n    const getUsers = () => {\n      getDataBase('/users', res => {\n        setUsers(Object.keys(res))\n      })\n    }\n    \n    return [userId,setUserId, users, connect];\n    }\n\n    const [userId, setUserId, users, connect] = useAuth();\n\n    // Create useHooks USECHATS\n    const useChats = (userId) => {\n\n      const [currentChat, setCurrentChat] = useState(null);\n      const [myActivateChats, setMyActivateChats] = useState([]);\n      const [myPrivateChats, setMyPrivateChats] = useState([]);\n      const [currentChatMessages, setCurrentChatMessages] = useState([]);\n      const [currentChatUsers, setCurrentChatUsers] = useState([]);\n      \n      useEffect(()=> {\n        getDataBase(`/users/${userId}/chats`, res => {\n          setMyActivateChats(Object.keys(res));\n        });\n      \n        getDataBase(`/users/${userId}/chatPrivate`, res => {\n          setMyPrivateChats(Object.keys(res));\n        });\n\n        getDataBase(`/chats/${currentChat}/messages`, res => {\n          setCurrentChatMessages(Object.values(res));\n        });\n\n        getDataBase(`/chats/${currentChat}/users`, res => {\n          setCurrentChatUsers(Object.values(res));\n        });\n\n      }, [currentChat, userId]);\n      \n      const sendMessage = (chatName, body) => {\n        const messageId = uuid();\n        saveDataBase(`/chats/${chatName}/messages/${messageId}`, {\n          body, sender: userId, created: new Date().toISOString(),\n        })\n      };\n      \n      const createChat = (recipient, chatName, url) => {\n        saveDataBase(`users/${userId}/${url}/${chatName}`, chatName);\n        saveDataBase(`/${url}/${chatName}/messages`, {});\n        saveDataBase(`/${url}/${chatName}/users/${userId}`, userId);\n        setCurrentChat(chatName);\n        recipient.forEach(rec => {\n          saveDataBase(`users/${rec}/${url}/${chatName}`, chatName);\n          saveDataBase(`/${url}/${chatName}/users/${rec}`, rec);\n        })\n      }\n      \n      return {\n        sendMessage,\n        createChat,\n        currentChat,\n        myActivateChats,\n        myPrivateChats,\n        currentChatMessages,\n        currentChatUsers,\n        setCurrentChat\n      };\n      };\n\n      const {\n        sendMessage,\n        createChat,\n        currentChat,\n        myActivateChats,\n        myPrivateChats,\n        currentChatMessages,\n        currentChatUsers,\n        setCurrentChat\n        } = useChats(userId);\n\n    \n  return (\n    <DivApp className=\"App\">\n      { !userId ? <Connect connect={connect} /> : (\n        <section>\n          <NavBar user={userId} setUserId={setUserId}/>\n          <div className=\"container-fluid mt-4\">\n            <div className=\"row\">\n              <div className=\"col-md-3 col-12 mb-4\">\n                <User user={userId}/>\n                <ListUsers users={users.filter(user=> user !== userId)} createChat= {createChat} userCurrent={userId}/>\n              </div>\n              <div className=\"col-md-3 col-12 mb-4\">\n                <div className=\"d-flex justify-content-between\">\n                  <h3>Chats</h3> \n                  <ModalCreate createChat= {createChat} users={users.filter(user => user !== userId)}/>\n                </div>\n                <ActiveChats setCurrentChat = {setCurrentChat} myActivateChats= {myActivateChats} myPrivateChats= {myPrivateChats}/>\n              </div>\n              <div className=\"col-md-6 col-12 mb-4 container-fluid\">\n                {currentChat && <ChatWindow sendMessage= {sendMessage} currentUser={userId} currentChat={currentChat} messages={currentChatMessages} users={currentChatUsers}/>}\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n    </DivApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDaN0_upo1P3kgW6zkfSkf7VAXlByIaaXw\",\r\n  authDomain: \"idbi-ff4e5.firebaseapp.com\",\r\n  databaseURL: \"https://idbi-ff4e5.firebaseio.com\",\r\n  projectId: \"idbi-ff4e5\",\r\n  storageBucket: \"idbi-ff4e5.appspot.com\",\r\n  messagingSenderId: \"79757724217\",\r\n  appId: \"1:79757724217:web:27e944ee7313f2132c5be8\",\r\n  measurementId: \"G-0MW87LLBLC\"\r\n};\r\n\r\n\r\nexport default firebaseConfig","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase/app';\nimport firebaseConfig from './conexion/firebase.config';\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}